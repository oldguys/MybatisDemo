<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oldguy.example.modules.modal.dao.jpas.StoreMapper">

    <sql id="table_name">store</sql>

    <sql id="all_entity_columns">
        ${prefix}.id,
        ${prefix}.`name`,
        ${prefix}.sequence,
        ${prefix}.create_time,
        ${prefix}.`status`
    </sql>

    <select id="findByPage" resultType="com.oldguy.example.modules.modal.dto.json.StoreInfo">
        SELECT
        <include refid="all_entity_columns">
            <property name="prefix" value="a"/>
        </include>
        ,b.sequenceList
        FROM
        <include refid="table_name"/> a
        LEFT JOIN (
        SELECT
        GROUP_CONCAT(CONCAT(IFNULL(CONCAT(type, "-"), ""),IFNULL(CONCAT(sequence, ""), ""))) sequenceList,
        store_sequence
        FROM
        stock
        GROUP BY
        store_sequence
        ) b ON a.sequence = b.store_sequence
        <where>
            <if test="form.status != null">
                AND a.`status` = #{form.status}
            </if>
            <if test="form.startTime != null ">
                AND a.create_time &gt; #{form.startTime}
            </if>
            <if test="form.endTime != null ">
                AND a.create_time &lt; #{form.endTime}
            </if>
            <if test="form.queryText != null and !&quot;&quot;.equals(form.queryText.toString().trim())">
                AND (
                a.`name` LIKE CONCAT('%',#{form.queryText},'%')
                OR a.sequence LIKE CONCAT('%',#{form.queryText},'%')
                OR b.sequenceList LIKE CONCAT('%',#{form.queryText},'%')
                )
            </if>
        </where>
        <choose>
            <when test="form.sort != null and form.sort == 1">
                ORDER BY a.id DESC
            </when>
            <when test="form.sort != null and form.sort == 0">
                ORDER BY a.id ASC
            </when>
            <otherwise>
                ORDER BY a.id DESC
            </otherwise>
        </choose>
    </select>

    <select id="findOne" parameterType="long" resultType="Store">
        SELECT
        <include refid="all_entity_columns">
            <property name="prefix" value="a"/>
        </include>
        FROM
        <include refid="table_name"/>
        a
        WHERE
        a.id = #{id}
    </select>

    <select id="findAllByStatus" parameterType="int" resultType="Store">
        SELECT
        <include refid="all_entity_columns">
            <property name="prefix" value="a"/>
        </include>
        FROM
        <include refid="table_name"/>
        a
        <where>
            <choose>
                <when test="status != null">
                    a.`status` = #{status}
                </when>
            </choose>
        </where>
    </select>

    <update id="update" parameterType="Store">
        UPDATE
        <include refid="table_name"/>
        SET
        `name`=#{name},
        sequence=#{sequence},
        create_time=#{createTime},
        `status`=#{status}
        WHERE
        id = #{id}
    </update>


    <update id="updateStatus">
        UPDATE
        <include refid="table_name"/>
        SET
        a.`status` = #{status}
        WHERE
        a.id = #{id}
    </update>


    <insert id="save" parameterType="Store" keyProperty="id" useGeneratedKeys="true">
        INSERT
        <include refid="table_name"/>
        (
        `name`,
        sequence,
        create_time,
        `status`
        )
        VALUES (
        #{name},
        #{sequence},
        #{createTime},
        #{status}
        )
    </insert>

    <insert id="saveBatch" parameterType="Store" keyProperty="id" useGeneratedKeys="true">
        INSERT
        <include refid="table_name"/>
        (
        `name`,
        sequence,
        create_time,
        `status`
        )
        VALUES
        <foreach collection="collections" item="item" separator=",">
            (
            #{item.name},
            #{item.sequence},
            #{item.createTime},
            #{item.status}
            )
        </foreach>

    </insert>

</mapper>